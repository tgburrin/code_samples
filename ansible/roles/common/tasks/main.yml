---
- setup:
#- debug: var=hostvars

- name: Collecting ec2 instance facts
  delegate_to: localhost
  amazon.aws.ec2_instance_info:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "us-east-1"
  register: ec2_instances
  when: cloud_provider is defined and cloud_provider == "aws"

#- debug: var=ec2_instances

- name: Building hostlist
  set_fact:
          ec2hostlist: "{{ ec2hostlist|default([]) + [ { 'address': item.private_ip_address|default(''), 'name': item.tags.Name, 'internal_name': item.private_dns_name|default('') } ] }}"
  with_items: "{{ ec2_instances.instances|default([]) }}"
  when: ec2_instances is defined and item.tags.automated == "true" and item.private_ip_address is defined and cloud_provider is defined and cloud_provider == "aws"

#- debug:
#    msg: >-
#            {{ item }}
#  with_items: "{{ ec2hostlist }}"

- name: "Remove invalid hosts (AWS)"
  lineinfile:
    dest: "/etc/hosts"
    state: absent
    regexp: ".* # application host alias$"
  when: ec2_instances is defined and cloud_provider is defined and cloud_provider == "aws"

- name: "Add to hosts (AWS)"
  lineinfile:
    dest: "/etc/hosts"
    line: "{{ item.address }} {{ item.internal_name }} {{ item.name }} {{ item.internal_name.split('.')[0] }}  # application host alias"
  with_items: "{{ ec2hostlist }}"
  when: ec2_instances is defined and cloud_provider is defined and cloud_provider == "aws"

- name: "Fix apt repositories"
  ansible.builtin.replace:
    path: /etc/apt/sources.list
    regexp: '(^deb .* main$)'
    replace: '\1 contrib non-free'

# Debian specific
- name: "Update Repository cache"
  apt:
    update_cache: true
    cache_valid_time: 3600
    force_apt_get: true

- name: Add standard packages
  package: name="{{ item }}" state=latest
  with_items:
    - git
    - bind9-utils # bind-utils for centos
    - sysstat
    - gpg
    - pkg-config

- file: path=/installs/code_samples state=absent

- name: "Get git repository"
  file: path=/installs state=directory
- git: repo=https://github.com/tgburrin/code_samples.git dest=/installs/code_samples update=no version=master
- copy:
    dest: "/root/.ssh/id_rsa"
    content: "{{ tgb_internal_key }}"
    owner: root
    group: root
    mode: 0600
- copy:
    dest: "/root/.ssh/"
    src: "{{ item.name }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
      - { name: id_rsa.pub, mode: "0644" }
      - { name: config, mode: "0644" }
      - { name: authorized_keys, mode: "0644" }
- lineinfile:
    path: "/etc/ssh/sshd_config"
    regexp: "^PermitRootLogin "
    line: "PermitRootLogin yes"
  register: sshd_config
- service:
    name: sshd
    state: restarted
  when: sshd_config.changed
